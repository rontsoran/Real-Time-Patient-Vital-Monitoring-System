classdef medicalsimulator < matlab.apps.AppBase

    % App components
    properties (Access = public)
        UIFigure
        GridLayout
        LeftPanel
        PatientDropDown
        PatientLabel
        Lamp
        RefreshButton
        StatusLabel
        CenterPanel
        blood_pressure_systolic
        Oxygen
        blood_pressure_systolic_diastolic
        heart_rate
        RightPanel
    end

    % Auto-reflow properties
    properties (Access = private)
        onePanelWidth = 576;
        twoPanelWidth = 768;
    end

    % Private properties
    properties (Access = private)
        PatientIDs
        TimerObj
        BASE_URL = 'http://myserver.com/api'; % Generic server URL
    end

    methods (Access = private)

        % Load patient list from server
        function loadPatients(app)
            try
                data = webread([app.BASE_URL '/patients/']);
                names = string({data.name});
                app.PatientIDs = [data.id];
                app.PatientDropDown.Items = names;
                if ~isempty(names)
                    app.PatientDropDown.Value = names(1);
                    app.StatusLabel.Text = sprintf('Loaded patient: %s', names(1));
                    app.Lamp.Color = [0 1 0]; % ✅ server connected
                else
                    app.StatusLabel.Text = 'No patients found';
                    app.Lamp.Color = [1 0 0]; % ❌ no patients
                end
            catch ME
                app.StatusLabel.Text = ['Server error: ' ME.message];
                app.Lamp.Color = [1 0 0]; % ❌ server error
            end
        end

        % Refresh vitals for selected patient
        function refreshVitals(app)
            try
                selectedName = app.PatientDropDown.Value;
                if isempty(selectedName), return; end
                idx = find(strcmp(app.PatientDropDown.Items, selectedName),1);
                if isempty(idx), return; end
                patientID = app.PatientIDs(idx);

                % Get patient data
                patient = webread([app.BASE_URL '/patients/' num2str(patientID)]);

                % Determine critical BP ranges based on gender
                if strcmpi(patient.gender,'male')
                    bp_sys_range = [80 180];
                    bp_dia_range = [50 110];
                else
                    bp_sys_range = [80 170];
                    bp_dia_range = [50 105];
                end

                % ---------------- Plot Oxygen ----------------
                cla(app.Oxygen);
                plot(app.Oxygen, patient.oxygen_saturation,'bo','MarkerSize',10,'MarkerFaceColor','b');
                title(app.Oxygen,'Oxygen Saturation');
                xlabel(app.Oxygen,'Measurement');
                app.Oxygen.XTickLabel = {};
                ylabel(app.Oxygen,'Oxygen (%)');
                grid(app.Oxygen,'on');
                yline(app.Oxygen,88,'--r','Min Safe','LabelHorizontalAlignment','left');
                yline(app.Oxygen,100,'--g','Max','LabelHorizontalAlignment','left');

                % ---------------- Plot Temperature ----------------
                cla(app.blood_pressure_systolic);
                plot(app.blood_pressure_systolic, patient.temperature,'ro','MarkerSize',10,'MarkerFaceColor','r');
                title(app.blood_pressure_systolic,'Body Temperature');
                xlabel(app.blood_pressure_systolic,'Measurement');
                app.blood_pressure_systolic.XTickLabel = {};
                ylabel(app.blood_pressure_systolic,'Temperature (°C)');
                grid(app.blood_pressure_systolic,'on');
                yline(app.blood_pressure_systolic,35,'--r','Min Safe','LabelHorizontalAlignment','left');
                yline(app.blood_pressure_systolic,42,'--g','Max','LabelHorizontalAlignment','left');

                % ---------------- Plot Heart Rate ----------------
                cla(app.heart_rate);
                plot(app.heart_rate, patient.heart_rate,'go','MarkerSize',10,'MarkerFaceColor','g');
                title(app.heart_rate,'Heart Rate');
                xlabel(app.heart_rate,'Measurement');
                app.heart_rate.XTickLabel = {};
                ylabel(app.heart_rate,'Heart Rate (bpm)');
                grid(app.heart_rate,'on');
                yline(app.heart_rate,30,'--r','Min Safe','LabelHorizontalAlignment','left');
                yline(app.heart_rate,200,'--g','Max','LabelHorizontalAlignment','left');

                % ---------------- Plot Blood Pressure ----------------
                ax = app.blood_pressure_systolic_diastolic;
                cla(ax,'reset'); % Clear previous plot
                hold(ax,'on');
                hSys = plot(ax, patient.blood_pressure_systolic,'r^-','LineWidth',1.5,'MarkerSize',8,'MarkerFaceColor','r');
                hDia = plot(ax, patient.blood_pressure_diastolic,'bv-','LineWidth',1.5,'MarkerSize',8,'MarkerFaceColor','b');
                ax.XTickLabel = {};
                % Threshold lines
                yline(ax,bp_sys_range(1),'--r','Low SYS','LabelHorizontalAlignment','left','HandleVisibility','off');
                yline(ax,bp_sys_range(2),'--g','High SYS','LabelHorizontalAlignment','left','HandleVisibility','off');
                yline(ax,bp_dia_range(1),':r','Low DIA','LabelHorizontalAlignment','left','HandleVisibility','off');
                yline(ax,bp_dia_range(2),':g','High DIA','LabelHorizontalAlignment','left','HandleVisibility','off');
                title(ax,'Blood Pressure');
                xlabel(ax,'Measurement');
                ylabel(ax,'Pressure (mmHg)');
                grid(ax,'on');
                legend(ax,[hSys,hDia],{'Systolic','Diastolic'},'Location','best');
                hold(ax,'off');

                % Update status label
                app.StatusLabel.Text = sprintf('Patient: %s', selectedName);

            catch ME
                app.StatusLabel.Text = ['Error: ' ME.message];
            end
        end
    end

    % Component callbacks
    methods (Access = private)

        function startupFcn(app)
            loadPatients(app);
            app.TimerObj = timer('ExecutionMode','fixedSpacing','Period',5, ...
                                 'TimerFcn', @(~,~) refreshVitals(app));
            start(app.TimerObj);
        end

        function RefreshButtonPushed(app, event)
            try
                data = webread([app.BASE_URL '/patients/']);
                names = string({data.name});
                app.PatientIDs = [data.id];
                app.PatientDropDown.Items = names;

                if ~isempty(names)
                    app.PatientDropDown.Value = names(1);
                    app.StatusLabel.Text = sprintf('Loaded patient: %s', names(1));
                    app.refreshVitals();
                else
                    app.StatusLabel.Text = 'No patients found';
                end
            catch ME
                app.StatusLabel.Text = ['Error refreshing: ' ME.message];
            end
        end

        % Adjust layout depending on window width
        function updateAppLayout(app, event)
            currentFigureWidth = app.UIFigure.Position(3);
            if currentFigureWidth <= app.onePanelWidth
                app.GridLayout.RowHeight = {480,480,480};
                app.GridLayout.ColumnWidth = {'1x'};
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = 1;
                app.LeftPanel.Layout.Row = 2;
                app.LeftPanel.Layout.Column = 1;
                app.RightPanel.Layout.Row = 3;
                app.RightPanel.Layout.Column = 1;
            elseif currentFigureWidth <= app.twoPanelWidth
                app.GridLayout.RowHeight = {480,480};
                app.GridLayout.ColumnWidth = {'1x','1x'};
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = [1,2];
                app.LeftPanel.Layout.Row = 2;
                app.LeftPanel.Layout.Column = 1;
                app.RightPanel.Layout.Row = 2;
                app.RightPanel.Layout.Column = 2;
            else
                app.GridLayout.RowHeight = {'1x'};
                app.GridLayout.ColumnWidth = {203,'1x',176};
                app.LeftPanel.Layout.Row = 1;
                app.LeftPanel.Layout.Column = 1;
                app.CenterPanel.Layout.Row = 1;
                app.CenterPanel.Layout.Column = 2;
                app.RightPanel.Layout.Row = 1;
                app.RightPanel.Layout.Column = 3;
            end
        end
    end

    % App creation and deletion
    methods (Access = public)

        function app = medicalsimulator
            createComponents(app);
            registerApp(app, app.UIFigure)
            runStartupFcn(app,@startupFcn)
            if nargout==0, clear app; end
        end

        function delete(app)
            delete(app.UIFigure);
        end
    end
end
